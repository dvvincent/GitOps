apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
  namespace: webapp
  labels:
    app: webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
        - name: webapp
          image: nginx:latest
          ports:
            - containerPort: 80
          env:
            - name: ENVIRONMENT
              value: production
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: url
          volumeMounts:
            - name: config-volume
              mountPath: /etc/nginx/conf.d
            - name: log-volume
              mountPath: /var/log/nginx
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 5

        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-storage
              mountPath: /data
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 30
            periodSeconds: 10

        - name: prometheus-node-exporter
          image: prom/node-exporter:latest
          ports:
            - containerPort: 9100
              name: metrics
          resources:
            requests:
              memory: "50Mi"
              cpu: "100m"
            limits:
              memory: "100Mi"
              cpu: "200m"

      volumes:
        - name: config-volume
          configMap:
            name: nginx-config
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
        - name: log-volume
          persistentVolumeClaim:
            claimName: nginx-log-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: webapp
spec:
  storageClassName: longhorn
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-log-pvc
  namespace: webapp
spec:
  storageClassName: longhorn
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 2Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: webapp
data:
  default.conf: |
    server {
      listen 80;
      server_name localhost;
      location / {
        root /usr/share/nginx/html;
        index index.html;
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: webapp
type: Opaque
data:
  url: c3FsOi8vZGF0YWJhc2UtdXNlcjpwYXNzd29yZEBob3N0L2RhdGFiYXNlCg== # This is a base64 encoded URL

---
apiVersion: v1
kind: Secret
metadata:
  name: wildcard-happynoises-work-tls
  namespace: webapp
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZCakNDQSs2Z0F3SUJBZ0lTQTRUb0xNNjFqQzFlWGZHS21UUExCQmZKTUEwR0NTcUdTSWIzRFFFQkN3VUEKTURNeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rd3dDZ1lEVlFRRApFd05TTVRFd0hoY05NalF3T0RJMU1UYzFNekUwV2hjTk1qUXhNVEl6TVRjMU16RXpXakFkTVJzd0dRWURWUVFECkRCSXFMbWhoY0hCNWJtOXBjMlZ6TG5kdmNtc3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUsKQW9JQkFRQ1g2cEdIZWtIWGxYdVQ5TDlNS2pobGR1T3JZd0s3V3E1WVFxejQxVG9BbHpqd0ZzaXlkT3Nid0EzYQpNbjJ0U0lLeDlHc2xDYlpnWFFvUmlBY3hjZFgvWFg5VXdpc3pyQ1UyVStFcjB0SzJ0WEZNc0s0cDkraXp6cGdlCk1MdkZrSStWTmFMVjZEdEh1bjBCbEtJZGFQZzlwSHBaTFZjamZkMUVta0ZxTkFLOGMwTWhnVVVBSVZyWkVxYk0KdzNpMXlpOHZoWjdTeGVjbXB2RHZ3WW5BWVhITGNHMllBTEd6Mm1LdlpldjBQWGxIMWVJNWhyNlhIV3RyUjJMRQpFaWdPSE95TmNuTU50M3E5UEtnUU1IUlZxMkhHbXZXeDRTMEVUb0huRnN1cnZ4RFhSdDFmVVFXYyt2SU55MDVuClNhbFlQVXNoWDVTSHJFTmtDSHRkOWtJRzhHVUJBZ01CQUFHamdnSW9NSUlDSkRBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpIUVlEVlIwT0JCWUVGTjJsMDVoQWtGRHErckI3Tlp3bG1MbkNXWTIvTUI4R0ExVWRJd1FZTUJhQUZNWFBScVRxCjlNUEFlbXlWeEMyd1hwSXZKdU81TUZjR0NDc0dBUVVGQndFQkJFc3dTVEFpQmdnckJnRUZCUWN3QVlZV2FIUjAKY0RvdkwzSXhNUzV2TG14bGJtTnlMbTl5WnpBakJnZ3JCZ0VGQlFjd0FvWVhhSFIwY0RvdkwzSXhNUzVwTG14bApibU55TG05eVp5OHdMd1lEVlIwUkJDZ3dKb0lTS2k1b1lYQndlVzV2YVhObGN5NTNiM0pyZ2hCb1lYQndlVzV2CmFYTmxjeTUzYjNKck1CTUdBMVVkSUFRTU1Bb3dDQVlHWjRFTUFRSUJNSUlCQkFZS0t3WUJCQUhXZVFJRUFnU0IKOVFTQjhnRHdBSFVBU0xEamE5cW1SelFQNVdvQytwMHc2eHhTQWN0VzNTeUIyYnUvcXpuWWhITUFBQUdSaXVGQwo3d0FBQkFNQVJqQkVBaUJNakRxTEYzOUlVMmFWbUV4NUNhR3JYWVltbmRnWHRaL0NHWEdvVjFoVVFBSWdjV05EClNiekx2Mll4dmhwY3grbmM2SHFUbldxSE9OZGNneWdncWhpdXQvNEFkd0RmNFZicnFnV3Z0WndQaG5HTnFNQXkKVHE1VzJXNm45YVZxQWRIQk83NVNYQUFBQVpHSzRVT0FBQUFFQXdCSU1FWUNJUUNNTEtUSDBINE5Qc1FlclRXSwpYOE1ySHgwTy9GRG5oSzFVK2tVYU12T2dtd0loQU1hRGQ0TWdGQW5DSkZXOXpndWZERDQ0dzRrVm02Y3dhemV0ClpPNkxrN0JDTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCTkpxNEg5SGpTTTVueWQ0K1k2Q0JuejAwSlliZ2cKK0tzalBWcnFRUWExRlE4dERhUVVWMEZlWnBaT1FDRmhYanBSWEYycS95VUZwcTBWQ2ZvMmFVc2o5eU5lSG8xYQo2bVFndkQ2Y3E3MmxJcWlUTUt2OTJrYWVoamJMN2JzcHdOaE94bVQ1VlBJQ3llbmVQZ2d3RXc4V09aVWtXeXFkClIwYytDbld3ZVpPQzVYeUdIVUxQSy9KRUViaWdTeHh4NzJwNW9Eb3J6OHZ6VmpHRlRLcFY3MXYrQS9Rb1JQUkoKdTlHUDdiajRvcFhWdUZETnIvc2FzbmhzWWJNR2xmS3hSaEhheml6ZU5ZemhhdHBFeGZPSVhiS0QzNEpmc3cyego0UEEwdDg5WHVvd0FiV1BrSUhLRUFYSDFSV3E0Mlk5WWM2VjJXeVVRZ3hLZU1qQWtQeWVkZkhCbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGQmpDQ0F1NmdBd0lCQWdJUkFJcDlQaFBXTHpEdkk0YTlLUWRyTlBnd0RRWUpLb1pJaHZjTkFRRUxCUUF3ClR6RUxNQWtHQTFVRUJoTUNWVk14S1RBbkJnTlZCQW9USUVsdWRHVnlibVYwSUZObFkzVnlhWFI1SUZKbGMyVmgKY21Ob0lFZHliM1Z3TVJVd0V3WURWUVFERXd4SlUxSkhJRkp2YjNRZ1dERXdIaGNOTWpRd016RXpNREF3TURBdwpXaGNOTWpjd016RXlNak0xT1RVNVdqQXpNUXN3Q1FZRFZRUUdFd0pWVXpFV01CUUdBMVVFQ2hNTlRHVjBKM01nClJXNWpjbmx3ZERFTU1Bb0dBMVVFQXhNRFVqRXhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUIKQ2dLQ0FRRUF1b2U4WEJzQU9jdktDczNVWnhENUFUeWxUcVZoeXliS1V2c1ZBYmU1S1BVb0h1MG5zeVFZT1djSgpEQWpzNERxd08zY092ZlBsT1ZSQkRFNnVRZGFaZE41UjIrOTcvMWk5cUxjVDl0NHgxZkp5eVhKcUM0TjBsWnhHCkFHUVVtZk94MlNMWnphaVNxaHdtZWovKzcxZ0Zld2lWZ2R0eEQ0Nzc0ekVKdXdtK1VFMWZqNUYyUFZxZG5vUHkKNmNSbXMrRUdaa05JR0lCbG9EY1ltcHVFTXBleHNyM0UrQlVBblNlSSsrSmpGNVpzbXlkblM4VGJLRjVwd25udwpTVnpnSkZEaHhMeWhCYXg3UUcwQXRNSkJQNmRZdUMvRlhKdWx1d21lOGY3cnNJVTUvYWdLNzBYRWVPdGxLc0xQClh6emU0MXhORy9jTEp5dXFDMEozVTA5NWFoMkgyUUlEQVFBQm80SDRNSUgxTUE0R0ExVWREd0VCL3dRRUF3SUIKaGpBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFnWUlLd1lCQlFVSEF3RXdFZ1lEVlIwVEFRSC9CQWd3QmdFQgovd0lCQURBZEJnTlZIUTRFRmdRVXhjOUdwT3IwdzhCNmJKWEVMYkJla2k4bTQ3a3dId1lEVlIwakJCZ3dGb0FVCmViUlo1bnUyNWVRQmM0QUlpTWdhV1BicG0yNHdNZ1lJS3dZQkJRVUhBUUVFSmpBa01DSUdDQ3NHQVFVRkJ6QUMKaGhab2RIUndPaTh2ZURFdWFTNXNaVzVqY2k1dmNtY3ZNQk1HQTFVZElBUU1NQW93Q0FZR1o0RU1BUUlCTUNjRwpBMVVkSHdRZ01CNHdIS0Fhb0JpR0ZtaDBkSEE2THk5NE1TNWpMbXhsYm1OeUxtOXlaeTh3RFFZSktvWklodmNOCkFRRUxCUUFEZ2dJQkFFN2lpVjBLQXh5UU9ORDFIL2x4WFBqRGo3STNpSHB2c0NVZjdiNjMySVlHanVrSmhNMXkKdjRIei9NclBVMGp0dmZacFF0U2xFVDQxeUJPeWtoMEZYK291MU5qNFNjT3Q5Wm1Xbk84bTJPRzBKQXRJSUUzOAowMVMwcWNZaHlPRTJHLzkzWkNrWHVmQkw3MTNxelhuUXY1Qy92aU95a05wS3FVZ3hkS2xFQytIaTlpMkRjYVIxCmU5S1V3UVVaUmh5NWovUEVkRWdsS2czbDlkdEQ0dHVUbTdrWnRCOHYzMm9PanpIVFl3KzdLZHpkWml3L3NCdG4KVWZoQlBPUk51YXk0cEp4bVkvV3JoU01kekZPMnEzR3UzTVVCY2RvMjdnb1lLakw5Q1RGOGovWno1NXljdFVvVgphbmVDV3MvYWpVWCtIeXBrQlRBK2M4TEdETG5XTzJOS3EwWUQvcG5BUmtBbllHUGZVRG9IUjlnVlNwL3FSeCtaCldnaGlETFpzTXdoTjF6anRTQzB1QldpdWdGM3ZUTnpZSUVGZmFQRzdXczNqRHJBTU1ZZWJROTVKUStISUJEL1IKUEJ1SFJUQnBxS2x5RG5rU0hESFlQaU5YM2FkUG9QQWNnZEYzSDIvVzBybW9zd01XZ1RsTG4xV3UwbXJrczcvcQpwZFdmUzZQSjFqdHk4MHIyVktzTS9EajNZSURmYmpYS2RhRlU1Qys4YmhmSkdxVTN0YUthdXV6MHdIVkdUM2VvCjZGbFdrV1l0YnQ0cGdkYW1sd1ZlWkVXK0xNN3FaRUpFc01OUHJmQzAzQVBLbVpzSmdwV0NEV09LWnZrWmN2alYKdVlrUTRvbVlDVFg1b2h5K2tuTWpkT21kSDljN1NwcUVXQkRDODZmaU5leCtPMFhPTUVaU2E4REEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbCtxUmgzcEIxNVY3ay9TL1RDbzRaWGJqcTJNQ3UxcXVXRUtzK05VNkFKYzQ4QmJJCnNuVHJHOEFOMmpKOXJVaUNzZlJySlFtMllGMEtFWWdITVhIVi8xMS9WTUlyTTZ3bE5sUGhLOUxTdHJWeFRMQ3UKS2Zmb3M4NllIakM3eFpDUGxUV2kxZWc3UjdwOUFaU2lIV2o0UGFSNldTMVhJMzNkUkpwQmFqUUN2SE5ESVlGRgpBQ0ZhMlJLbXpNTjR0Y292TDRXZTBzWG5KcWJ3NzhHSndHRnh5M0J0bUFDeHM5cGlyMlhyOUQxNVI5WGlPWWErCmx4MXJhMGRpeEJJb0RoenNqWEp6RGJkNnZUeW9FREIwVmF0aHhwcjFzZUV0QkU2QjV4YkxxNzhRMTBiZFgxRUYKblByeURjdE9aMG1wV0QxTElWK1VoNnhEWkFoN1hmWkNCdkJsQVFJREFRQUJBb0lCQUFndXdFdjF6OW9XMlNNdApDYWpHbFdjUnNrMm05WnkxMDdJNVZTdktBR2ZMdld0aExzbzk5ZlAyc2toUWMraURnVmFvZmFUdkV2MjV4VE1RCmlxS2xLUXVxTTVPVEtkU01yeXh2OUM3eUdodHhSbnNGQVR5TmQrRkhmWFlTMWVwY1VQK09kZ2pqaTEzZnM2QUUKSzM4K0NqRDN6UWRFbys3cmRxR2RWV3l0QklDMTkyVnZudlNQMXJJZFJhRFczdjNYbnZ1cHVTVUFKaGlqOTVOKwp2VmNTRHM2cHBqMVBtL0FQbFcwb1JpeWxCWWxSR2lDRXVqait3cVV1ZHpTcS9CdmdQdXN0SGJlcmtxZ3l6SVdvCm9JdEc0QzdJb0pVVkYxK25uZ2lZbk5hUDNDQXRidHVSTUw4aC9TQy9keDdHR3dJSmY4cjNWbjR4Rzkzd2IyazMKbTBaK2xZRUNnWUVBd0dCaSsrU1I3MWNtNHU2YUg5TFhLS0FVVVk4QlNDdDlqV29ZNHdnUnR0dktrZHQ5SW40cgp4VjE5N0pURDZja29oK3QrUGVOUHN6cGU3elVQNmZQUC9EL3h6SlpoL1gxTEw0Z2xkeUJCakdzWkYweVpnUnZECkg4azEyclFlcldzczlFSDVZbUM1Uk9iRTNOZXRTVFVZbDdHNDhyWnJwZG9BZk5SdytQaHIrNmtDZ1lFQXlpaWEKMlVSQ2RNc3JkUm9ISVNOeTVLd2NHbktGNGhRYXVVZitLbTZzYTlYeE53c2pUa0VzMXJQNkNBSkZWUVNtYmxragp0NHh0QUpKTHh3VlpnSGhES2NnUG1PdVFmM0VtOEhMSWk0Q1dacEhXNk53WDYySUVxVkV0Umsvb0luREdTb0s1Ck9uM0RMaS9VYWRzNzhDZDFOanNRUXlPRk4xcHZkT3JGTnFFRk5aa0NnWUE3VHp3VkpzSHJSVFpDN29icjJzZmsKeVgyYUszbWNzM1BRM20zdnlMUVZhU3ZKemg2RlBOcm56VXdlWFRzTlg2dzBRMkUzV1ZaZ0RsWG9iN2FKVFZiSgpFVG5OOW1zZGlMeGVXaDRhM1FINGRhaFZxNU1EMy9oSFczUlVDZ1lQTnlTejVZY3FVbUdzSVcxK0hLeGJEcGlYClkvNStMY21BWjNhUkJib1N1QndxaVFLQmdDTHJFSlFtcmpQdVEvdGVHNDBseWxxbFA5VnhvcDZDU250bWJBaDQKUlYvNi9FYzlyVU4vRG5lbmJyQ2pjOFpUbjB2QUtlTXlaa0dMQTN2RStNaXYvU25pWEk5VllRZ2lTMCtOQkFiVQpseVh3V3VhdDNaUFN3bXRja2kxcTcvWEM5UDA1eHpUTE5FTnVENHFaUzZrWHA2OU9WR2pFWWVaRndLcTVRb2RGCkdObEJBb0dCQUo5Z0l2RlNpUTMzMGo0QmQ3dG9DbHlTUTduTEFYV2ovKzQ0MFRIQ1N6S2p6cFRiMktZQUJCajcKenVkRWI3NkRhaEkvd3QzakdWc01WNlpPOUF5NElKQTI5SzcvbGxSaXYzZGowN2lrYSt3d0ZrNktaSitESExvMAp3Q2NGajJ2RzMyZlFKVmV0MUpQOTBVVmtPTjJ1QVdKUytGTzlPUXUzS29LYkhkVFlKZ3JQCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webapp-ingress
  namespace: webapp
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
    - hosts:
        - webapp.happynoises.work
      secretName: wildcard-happynoises-work-tls
  rules:
    - host: webapp.happynoises.work
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: webapp
                port:
                  number: 80

---
apiVersion: v1
kind: Service
metadata:
  name: webapp
  namespace: webapp
spec:
  type: ClusterIP
  ports:
    - port: 80
